/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.foi.nwtis.alebenkov.zadaca_1;

import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.foi.nwtis.alebenkov.konfiguracije.Konfiguracija;
import org.foi.nwtis.alebenkov.konfiguracije.KonfiguracijaApstraktna;
import org.foi.nwtis.alebenkov.konfiguracije.NemaKonfiguracije;

/**
 *
 * @author alen
 */
public class KlijentSustava {
    
    protected Konfiguracija konfig;
    protected String parametri;
    protected Matcher mParametri;

    public KlijentSustava(String parametri) throws Exception {
        this.parametri = parametri;
        this.mParametri = provjeraParametara(parametri);
        if (this.mParametri == null) {
            throw new Exception("Parametri usera ne odgovaraju!");
        }
    }
        
    public Matcher provjeraParametara(String p) {
        String sintaksa = "^-user -s ([^\\s]+) -port (\\d{4}) -u ([^\\s]+) -konf +([^\\s]+.(xml|txt)) -cekaj (\\d{1})( +-multi)? -ponavljaj (\\d{1})$";

        Pattern pattern = Pattern.compile(sintaksa);
        Matcher m = pattern.matcher(p);
        boolean status = m.matches();
        if (status) {
            return m;
        } else {
            System.out.println("Ne odgovara!");
            return null;
        }
    }
    
    public void pokreniKlijenta(){
        System.out.println("Pokrecem klijenta...");
        System.out.println("parametri..." + mParametri.groupCount());
        String server = this.mParametri.group(1);
        String korisnik = this.mParametri.group(3);
        int port = Integer.parseInt(this.mParametri.group(2));
        String datoteka = this.mParametri.group(4);
        int cekaj = Integer.parseInt(this.mParametri.group(6));
        int ukupniBrojCiklusa = Integer.parseInt(this.mParametri.group(8));
        System.out.println("Spajam se na "+server + ":"+port);
        System.out.println("Korisnicka datoteka je: "+datoteka);
        System.out.println("Korisnik je: "+korisnik);
        System.out.println("Cekanje je: "+cekaj);
        System.out.println("Ponavljanje je: "+ukupniBrojCiklusa);
        File dat = new File(datoteka);
        if (!dat.exists()) {
            System.out.println("Datoteka konfiguracije ne postoji.");
            return;
        }

        Konfiguracija konfig = null;
        try {
            konfig = KonfiguracijaApstraktna.preuzmiKonfiguraciju(datoteka);
            
            if(this.mParametri.group(2) != null){
                //TODO ovo nam treba za neobavezne parametre
            }
            
            
            
            //TODO traži se više dretvi koje se mogu izvršavati
            System.out.println("Saljem novi zahtjev prema serveru...");
            SlanjeZahtjeva sz = new SlanjeZahtjeva();
            sz.setServer(server);
            sz.setPort(port);
            sz.setBrojCiklusa(ukupniBrojCiklusa);
            sz.start();
        } catch (NemaKonfiguracije ex) {
            Logger.getLogger(ServerSustava.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }
}